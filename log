//*********************************************************************************************
//* File             :   Program.cs
//* Author           :   Rajeev Punnalil (RBEI/EPG)
//* Date             :   10/4/2019
//* Description      :   Initial version
//* Version          :   1.0
//*-------------------------------------------------------------------------------------------
//* dd-MMM-yyyy	: Version 1.x, Changed By : xxx
//*
//*                 - 1)
//*                 - 2)
//*                 - 3)
//*                 - 4)
//*
//*********************************************************************************************
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using NLog.Web;
using Fuso.Reflection;
using System.Net;
using Fuso.DeviceManager.Backend;
using Microsoft.AspNetCore.Hosting.WindowsServices;
using Microsoft.AspNetCore.Server.Kestrel.Https;
using Fuso.DeviceManager.Contract.Encryption;

namespace Fuso.DeviceManager
{
    /// <summary>
    /// Program startup
    /// </summary>
    public static class Program
    {
        /// <summary>
        /// Main function
        /// </summary>
        /// <param name="args"></param>
        public static void Main(string[] args)
        {
            if (args.Contains("--encrypt"))

            {
                if (args.Length < 2)
                {
                    Console.WriteLine("Parameter expected for encryption");
                    return;
                }

                Console.WriteLine($"Encrypting content : '{args[1]}'");

                var content = DataEncrypter.Encrypt(args[1]);
                Console.WriteLine(content);

                Console.WriteLine(DataEncrypter.Decrypt(content));

                Console.WriteLine("Press enter key to exit.");
                Console.ReadLine();


                return;
            }


            bool isService = !(System.Diagnostics.Debugger.IsAttached || args.Contains("--console"));

            Directory.SetCurrentDirectory(Reflections.GetEntryAssemblyLocation().FullName);

            Console.WriteLine($"Device management server V{Reflections.GetAppVersion()}");

            var logger = NLog.Web.NLogBuilder.ConfigureNLog("nlog.config").GetCurrentClassLogger();

            logger.Log(NLog.LogLevel.Info, $"Starting Device Manager Server Version 1 : {Reflections.GetAppVersion()}");


            try
            {
                logger.Log(NLog.LogLevel.Info, $"Creating host");

                var host = CreateWebHostBuilder(args).Build();


                logger.Log(NLog.LogLevel.Info, $"Host created");

                if (isService) {
                    logger.Log(NLog.LogLevel.Info, "Running application as service.");
                    host.RunAsService();
                    logger.Log(NLog.LogLevel.Info, "Application run executed in service mode.");
                }
                else
                    host.Run();

            }
            catch (Exception ex)
            {
                //NLog: catch setup errors
                logger.Error(ex, "Stopped program because of exception");
                throw;
            }
            finally
            {
                // Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux)
                NLog.LogManager.Shutdown();
            }
        }

        /// <summary>
        /// Create web host
        /// </summary>
        /// <param name="args"></param>
        /// <returns></returns>

        public static IWebHostBuilder CreateWebHostBuilder(string[] args)
        {
            var config = new ConfigurationBuilder()
                   .SetBasePath(Fuso.Reflection.Reflections.GetCurrentAssemblyLocation().FullName)
                   .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
                   .Build();


            IConfiguration configuration = new ConfigurationBuilder()
                .AddJsonFile(Reflections.GetRootRelativeFile("appsettings.json").FullName, true, true)
                .Build();

            var appSettingsSection = configuration.GetSection("AppSettings");

            var appSettings = appSettingsSection.Get<AppSettings>();

            string url = string.Empty;


            if(appSettings.UseHttp)
                url = $"http://*:{appSettings.HttpPort};";

            if (appSettings.UseHttps)
            {
                url += $"https://*:{appSettings.Port}";

                var fileInfo = new FileInfo(appSettings.CertificateFile);

                if (!fileInfo.Exists)
                    throw new FileNotFoundException($"Certificate file not found - '{fileInfo.FullName}'");
            }

            return WebHost.CreateDefaultBuilder(args)
                .UseConfiguration(config)
                .UseKestrel(options =>
                {
                    options.AddServerHeader = false;

                    options.Limits.MaxRequestBodySize = null;

                    if (appSettings.UseHttps)
                    {
                        options.Listen(IPAddress.Any, appSettings.Port, listenOptions =>
                        {
                            listenOptions.UseHttps(appSettings.CertificateFile, DataEncrypter.Decrypt(appSettings.CertificatePassword));
                        });
                    }

                    if (appSettings.UseMutualTls)
                    {
                        options.Listen(IPAddress.Any, appSettings.MutualTlsPort, listenOptions =>
                        {
                            listenOptions.UseHttps(appSettings.CertificateFile, DataEncrypter.Decrypt(appSettings.CertificatePassword), kerstelOptions =>
                            {
                                kerstelOptions.ClientCertificateMode = ClientCertificateMode.RequireCertificate;
                                kerstelOptions.SslProtocols = System.Security.Authentication.SslProtocols.Tls12;
                            });
                        });
                    }

                    if (appSettings.UseHttp)
                    {
                        options.Listen(IPAddress.Any, appSettings.HttpPort);
                    }
                })
                .UseUrls(url)
                .UseStartup<Startup>()
                .ConfigureLogging(logging =>
                {
                    logging.ClearProviders();
                    logging.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Information);
                })
                .UseNLog();
        }
    }
}
